# 
# Make file for PHREEQC
#
TOPDIR=~dlpark/programs/phreeqc
PROGRAM=phreeqc
EXE=$(TOPDIR)/bin/$(PROGRAM)
#EXE=$(PROGRAM)

# Do not print commands before executing
#.SILENT:

# Provides compatibility with GNU make
#.SUFFIXES:

# Change to pawd if using automounter
PWD=pwd
#PWD=pawd

# Change to C compiler on your system
CC=gcc
#CC=/opt/SUNWspro/bin/cc   # Sun

# Change to C compiler options on your system
CCFLAGS=-O3 -Wall -ansi -pedantic # -pg
#CCFLAGS=-Wall -ansi -g 
#CCFLAGS=-fast             #Sun


LOADFLAGS= -lm # -pg

# Location to copy scripts on installation
BINDIR=$(HOME)/bin

OBJECTS=	main.o \
		advection.o \
		basic.o \
		basicsubs.o \
		cl1.o \
		input.o \
		integrate.o \
		inverse.o \
		isotopes.o \
		kinetics.o \
		mainsubs.o \
		output.o \
		model.o \
		p2clib.o \
		parse.o \
		phreeqc_files.o \
		phqalloc.o \
		prep.o \
		print.o \
		read.o \
		readtr.o \
		spread.o \
		step.o \
		structures.o \
		tally.o \
		tidy.o \
		transport.o \
		utilities.o \
		cvdense.o \
		cvode.o \
		dense.o \
		nvector.o \
		nvector_serial.o \
		smalldense.o \
		sundialsmath.o 

all: $(PROGRAM)

$(PROGRAM): $(TOPDIR)/bin/$(PROGRAM)

install: 
#
#    Create directory for binary and scripts if necessary
#
	if [ ! -d $(BINDIR) ]; \
           then \
              mkdir $(BINDIR); \
              echo Created directory $(BINDIR); \
        fi
#
#    Put path name of current directory into script for
#    locating data files, put script in top directory,
#    put symbolic link in BINDIR
#
	cd $(TOPDIR); dir1=`$(PWD)`/bin; cd $(BINDIR); if [ `$(PWD)` = $$dir1 ]; \
			then \
				echo "Can not install to $(BINDIR). Choose another directory."; \
				exit 4 ; \
			fi
	cd $(TOPDIR); \
		rm -f $(BINDIR)/$(PROGRAM); \
		rm -f $(PROGRAM); \
		sed "s?TOPDIR=.\{0,80\}?TOPDIR=`$(PWD)`?" bin/$(PROGRAM).orig > $(PROGRAM); \
		chmod 755 $(PROGRAM)
	cd $(TOPDIR); dir1=`$(PWD)`; cd $(BINDIR); if [ `$(PWD)` != $$dir1 ]; then \
			ln -s $$dir1/$(PROGRAM) $(BINDIR); \
			echo Symbolic link for $(PROGRAM) has been placed in $(BINDIR).	; \
		fi
#
#     Check that all necessary files are in place.
#
	if [ -f $(BINDIR)/$(PROGRAM) -a \
             -f $(TOPDIR)/bin/$(PROGRAM) -a \
             -f $(TOPDIR)/$(PROGRAM) ]; \
           then echo "Installation complete."; \
           else echo "Installation incomplete."; \
              for FILE in $(BINDIR)/$(PROGRAM) \
                 $(TOPDIR)/bin/$(PROGRAM) $(TOPDIR)/$(PROGRAM) ; \
              do \
                 if [ ! -f $$FILE ]; then echo $$FILE is missing.; fi; \
              done; \
           fi
	echo "Add directory $(BINDIR) to PATH."

clean:
	rm -f $(BINDIR)/$(PROGRAM)
	rm -f $(TOPDIR)/$(PROGRAM)
	rm -f $(TOPDIR)/bin/$(PROGRAM) *.o 
	echo Removed files generated by make.

$(TOPDIR)/bin/$(PROGRAM): $(OBJECTS) 
	$(CC) -o $(EXE) $(OBJECTS) $(LOADFLAGS) # -L/z/estespark/home/dlpark/packages/efence -lefence
	echo Compilation complete, $(EXE).

#$(PROGRAM): $(OBJECTS) 
#	$(CC) -o $(PROGRAM) $(OBJECTS) $(LOADFLAGS)  -lefence
#	echo Compilation complete, ./$(PROGRAM).

cvdense.h: cvode.h sundialstypes.h dense.h nvector.h
	touch cvdense.h

cvode.h: sundialstypes.h nvector.h 
	touch cvode.h

dense.h: smalldense.h
	touch dense.h

global.h: phrqtype.h
	touch global.h

nvector.h: sundialstypes.h
	touch nvector.h

nvector_serial.h: sundialstypes.h
	touch nvector_serial.h

sundialstypes.h: phrqtype.h
	touch sundialstypes.h

advection.o: advection.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) advection.c -c

basic.o: basic.c global.h phqalloc.h output.h phrqproto.h p2c.h
	$(CC) $(CCFLAGS) basic.c -c

basicsubs.o: basicsubs.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) basicsubs.c -c

cl1.o: cl1.c phqalloc.h output.h phrqtype.h
	$(CC) $(CCFLAGS) cl1.c -c

cvdense.o: cvdense.c cvdense.h cvode.h dense.h sundialstypes.h nvector.h sundialsmath.h output.h
	$(CC) $(CCFLAGS) cvdense.c -c

cvode.o: cvode.c cvode.h sundialstypes.h nvector.h sundialsmath.h output.h kinetics.h
	$(CC) $(CCFLAGS) cvode.c -c

dense.o: dense.c sundialstypes.h sundialsmath.h dense.h smalldense.h output.h
	$(CC) $(CCFLAGS) dense.c -c

input.o: input.c global.h input.h output.h phrqproto.h phqalloc.h 
	$(CC) $(CCFLAGS) input.c -c

integrate.o: integrate.c global.h phqalloc.h output.h phrqproto.h 
	$(CC) $(CCFLAGS) integrate.c -c

inverse.o: inverse.c global.h phqalloc.h output.h phrqproto.h 
	$(CC) $(CCFLAGS) inverse.c -c

isotopes.o: isotopes.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) isotopes.c -c

kinetics.o: kinetics.c global.h phqalloc.h output.h phrqproto.h sundialstypes.h cvode.h cvdense.h nvector_serial.h dense.h kinetics.h
	$(CC) $(CCFLAGS) kinetics.c -c

main.o: main.c global.h phqalloc.h output.h phrqproto.h input.h 
	$(CC) $(CCFLAGS) main.c -c

mainsubs.o: mainsubs.c global.h phqalloc.h output.h phrqproto.h input.h
	$(CC) $(CCFLAGS) mainsubs.c -c

model.o: model.c global.h phqalloc.h output.h phrqproto.h 
	$(CC) $(CCFLAGS) model.c -c

nvector.o: nvector.c nvector.h output.h 
	$(CC) $(CCFLAGS) nvector.c -c

nvector_serial.o: nvector_serial.c nvector_serial.h  sundialstypes.h sundialsmath.h output.h
	$(CC) $(CCFLAGS) nvector_serial.c -c

output.o: output.c global.h output.h phrqproto.h phqalloc.h 
	$(CC) $(CCFLAGS) output.c -c

p2clib.o: p2clib.c p2c.h output.h
	$(CC) $(CCFLAGS) p2clib.c -c

parse.o: parse.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) parse.c -c

phreeqc_files.o: phreeqc_files.c global.h phqalloc.h output.h phrqproto.h input.h
	$(CC) $(CCFLAGS) phreeqc_files.c -c

phqalloc.o: phqalloc.c global.h output.h
	$(CC) $(CCFLAGS) phqalloc.c -c

prep.o: prep.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) prep.c -c

print.o: print.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) print.c -c

read.o: read.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) read.c -c

readtr.o: readtr.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) readtr.c -c

smalldense.o: smalldense.c smalldense.h sundialstypes.h sundialsmath.h output.h
	$(CC) $(CCFLAGS) smalldense.c -c

spread.o: spread.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) spread.c -c

step.o: step.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) step.c -c

structures.o: structures.c global.h phqalloc.h output.h phrqproto.h 
	$(CC) $(CCFLAGS) structures.c -c

sundialsmath.o: sundialsmath.c sundialsmath.h sundialstypes.h output.h
	$(CC) $(CCFLAGS) sundialsmath.c -c

tally.o: tally.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) tally.c -c

tidy.o: tidy.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) tidy.c -c

transport.o: transport.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) transport.c -c

utilities.o: utilities.c global.h phqalloc.h output.h phrqproto.h
	$(CC) $(CCFLAGS) utilities.c -c

-include $(TOPDIR)/src/distribution.mk
